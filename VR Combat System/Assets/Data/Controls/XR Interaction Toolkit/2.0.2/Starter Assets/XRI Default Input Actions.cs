//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Data/Controls/XR Interaction Toolkit/2.0.2/Starter Assets/XRI Default Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRIDefaultInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRIDefaultInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRI Default Input Actions"",
    ""maps"": [
        {
            ""name"": ""XRI Head"",
            ""id"": ""09ff3ccc-21b4-4346-a3a2-7c978b5af892"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a9029f8-7a46-46b9-9eff-e9ae8365f611"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""aed87fe6-2b01-4dd2-a8fa-195578fd8158"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff1f981-6e1f-4e2c-a90c-715a0ea2e80e"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2017383-a3f6-4c46-acb1-012b8eece9cc"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand"",
            ""id"": ""5fe596f9-1b7b-49b7-80a7-3b5195caf74d"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""83a7af0b-87e3-42c3-a909-95fbf8091e4f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""cb6b7130-2bac-4ef7-abe4-6991ae7d419d"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""d20fc51c-7916-43a7-8b03-706049966aea"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""664a62b0-e178-421d-b3f8-014eec01591d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""61466a56-4ee4-47b1-aa6a-4806de1de5f2"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""afdcfbff-e241-4fdd-a6d1-23b0bf273360"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""ed03d944-4c09-4c38-8b68-5c844e18ca7c"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""c98fc8c8-7fc6-4909-89b6-c5b7568e7275"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""14aeff85-d719-43ff-a124-b1cd7ca8686d"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""abf752ec-feee-4d51-b530-f0870f48acc9"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""6580b669-0651-401c-9779-85ef22689130"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""ae101942-9eaa-4c53-a388-cafc3fd89bdf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""acdf9550-5529-4ff7-8558-73ecdf0d75bd"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97a0351f-659b-482a-8fa0-19015ccd055e"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Interaction"",
            ""id"": ""7a5e7537-cc30-4eb1-a544-6946baa8f3eb"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""33754c03-48ec-46ef-9bc6-22ed6bfdd8e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""e6005f29-e4c1-4f3b-8bf7-3a28bab5ca9c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""0c0991c5-d329-4afc-8892-1076b440477c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""0c3d0ec9-85a1-45b3-839b-1ca43f859ecd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""7e1eced7-c774-4fe5-be8f-d8711f646d9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""f241c1aa-1050-4338-b2bf-a4a47776693d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""21b75b25-12ad-410f-b4f8-a7745b7aca27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""bfa204c7-3c92-4193-bad1-39eb71920042"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71a4d23f-3e9a-4513-923b-ba388c5e84bf"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49a23327-a116-48c0-8af9-0d2c50c15a88"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""487f4f2e-9e9b-49aa-b0f2-4037a24624f5"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b8b1b59-2fdc-4998-8259-50341075d9a2"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b34c79c1-ab5e-4851-87ac-abc43705eae0"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71d94579-1bf4-4034-ab9e-e7166842128f"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""de8136fd-5b07-4794-bb96-63c6027cf1b6"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""529c0dda-d254-4a71-8aa8-7dbdeabbe45d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dad37c56-3fcd-4890-98bf-e06f80ba76ff"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e0dd3431-14bb-4817-ac71-ed700d5af1ca"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0064f189-a00e-4cf8-9f53-be76a30cb97f"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""44d142b3-f6ac-4d08-8bd1-fac53cf9bb9e"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b1dbcb6a-408c-413c-b2d1-7a10fe418324"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e38a62a-8bee-4853-b87a-1af460e3ec33"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2f25805f-44a3-4716-983c-532473bcc03c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d97ccaa1-79ae-4ca7-b7dd-be5ce92c94a6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Locomotion"",
            ""id"": ""22336389-9fb1-4c2c-8635-0ed30db0d29e"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""cbeaf823-3b69-4004-8ec8-13ea2ca3fc31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""a21db72c-4843-4839-b4d0-3ce8d287cb86"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""89ce8348-6001-41a3-85b9-f8f2e2dcad7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""9164e093-ebd4-4923-af32-1b52f31c2d66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9693e25f-8a4f-4aed-842f-3961243c69a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""95fa1419-ca7b-4c8a-8d15-7d46e58d82e3"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8da6ed3a-f621-49fe-8c76-1f6b7d7754d6"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aebee7-fa03-43d4-bfb7-77a3f87452cc"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99cb7ad1-51ec-4611-af68-92a85f2c17d6"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e383b1a-270f-4c20-819b-89a59cffb498"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand"",
            ""id"": ""7960f8ef-2bf3-4281-aecc-4c03809d6c8c"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""c4990d70-7b8a-4ce1-b03c-da86716b8352"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ee6bf5bf-bb0a-4a50-8327-cb654b19e298"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""167ea203-5bfb-4d74-bde9-8026b7483102"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""57b2a1b4-3290-46d6-ac07-4854ee8f91b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""84e51e1c-1b95-4f3e-a61f-29da6c1f0816"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""3722d501-eb80-4f61-9361-08a5ea7a1394"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""2e6ad191-d5aa-4919-aac6-295c83387a72"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""b9ecb60d-341e-47cf-b50a-41d5815af8b0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""74e968f1-ad08-4a82-a68d-764517faecef"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""9717e367-64a4-440a-9974-1e641d753eb2"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""0794a41d-29ef-48ec-a452-6b7de29b52fa"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""3ef0a781-60c5-48bc-a584-f95553f8ae0a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6011e1e6-b2dd-4cb1-8da5-29b03868f2c5"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03ccbaec-eeca-4fc4-8281-ee1758b4eb9b"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Interaction"",
            ""id"": ""461bce25-7762-40c5-b639-f190649be6d6"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""ac96c10b-c955-4a46-8e67-bf16bc069b53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""39bbf1ac-21a3-413d-90f6-6dbf6efeaabe"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""41976d89-60de-4deb-bff9-16b4af96b290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""c3ca6ed7-3d25-44a2-b1d8-5be4eb699370"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""65174b45-c2ee-4f90-93bb-fb4084eaaab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""962ac033-ec42-4981-88a4-551ad9be6ecb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""9b5d8312-f609-4895-b70f-81a722b2ae11"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""6f7cf253-7062-443b-b10f-2be48a33f027"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ce80054-410d-4112-a332-50faa7fb4f23"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd433817-216c-46b9-8dd3-f3a4ea1767b9"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa59aed1-ae0b-4074-a58c-294b85f46228"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""150f414f-61bf-47b1-b4f8-f772a2a40565"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92bb5b8f-bf48-4dab-af05-50a865773895"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b4ef08d-9ddd-4f0a-8539-d1114d14d143"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""61502e80-1b21-4116-890c-c0bc31c9dffd"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b466c01-134f-40f2-b376-f7e9684e423b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""79757cb3-5b81-4a3d-bc3c-d2582f85d5db"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""76425f70-54b8-4f8e-ad52-94debc75962c"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8df952de-cf29-4b5e-9a90-a6b4eee7f52c"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a4b1434f-f204-49c4-bcea-c25e321e93eb"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4ced8328-f738-4bbd-937a-c09019acd234"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f7e89e7c-f5a9-4f42-914f-945815a49033"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1),Invert"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""df3b3e57-34c6-4200-b00e-6617123a9680"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54ddc99c-3e9a-4c3a-9fdd-f5fb15952af4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Locomotion"",
            ""id"": ""99ce76d3-82c5-4289-9670-2ecffa6833fd"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""02e43582-8973-4940-af06-dff6158e3df2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""a6c7231d-c55d-4dd4-9e87-877bb5522ef5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""d587b60c-39a0-4365-8075-477ce484ba0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""9fb2eb2b-2fb6-4328-8167-10a1bf11b424"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""00a4dc9f-1ee6-4349-b0e9-72d5dccaadd6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""919c4a6c-22ed-4083-8e14-f30e91ff59fe"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62690862-4688-4010-975b-b3d9c6062157"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de466e6e-12bf-46a1-b0fd-ffbc343f3399"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6c08c3d-3d41-4695-994d-1ac9016a5a9e"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Left Controller"",
            ""id"": ""d0e4eaf9-12c5-4614-9e32-7110a2590015"",
            ""actions"": [
                {
                    ""name"": ""Trigger Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""1a56fc3f-7926-4b51-89c9-510debfeb78a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger Value"",
                    ""type"": ""Value"",
                    ""id"": ""3265e565-c886-4f34-aea9-3c678ad7a693"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""8cdc9f33-4583-41ef-a148-ea8680891a26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip Value"",
                    ""type"": ""Value"",
                    ""id"": ""ca7020f7-59be-48d0-8759-f0af048909f6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""0630516c-a97b-4122-b19a-04403f07b37d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""b5629322-f570-4c1c-a6e1-1818d0690b04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""4395bc5e-ef92-45a0-a93d-041eba8d2e7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0bf08ff0-4a71-4cd7-ab28-9106e44682fb"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f361c5-0d50-435c-8baa-0f4db3403e6e"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e06aac06-89a2-4685-b9fc-a6f458acda04"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2295650a-a7e8-497a-bd1d-6290dbe2a9e7"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56f86543-ed18-4fca-8cb0-6e8f51907308"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d31a98c9-0724-4118-84d5-38302c6d81d7"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""730b0dc9-23cc-4ee8-a700-76c6355138a6"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Right Controller"",
            ""id"": ""e2528be8-e646-4d94-8be8-59d9595bb333"",
            ""actions"": [
                {
                    ""name"": ""Trigger Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""48f198e0-6710-469a-a825-4b02054a6615"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger Value"",
                    ""type"": ""Value"",
                    ""id"": ""78da0ab1-12a8-4539-b544-fe60f9f3543b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""47466228-a687-419e-9ae9-bf5e3e2fe2cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip Value"",
                    ""type"": ""Value"",
                    ""id"": ""e77cc8de-635c-46a3-907a-3c9c0bbc1a37"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""182c484f-c954-4cec-8b24-be003a6329e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""d216bf25-4e32-4a94-8a81-9e3338f7005c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Home"",
                    ""type"": ""Button"",
                    ""id"": ""bc5d1a90-888a-4226-b3cc-55638fe76a1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc69644a-0ac7-4967-9d58-d311d66e9129"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2db36b20-c49b-446c-8f61-0b894f92c41f"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2d76980-7c58-496c-8aaa-c06d781240ee"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c4fd86b-60de-4b0f-9106-47d988d4d9fa"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a10acfd9-a634-4410-b808-9e41f6360618"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d51b821-d705-4869-8996-ac222922bb7d"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54eb0d2b-225a-496a-aa2c-606e370cf0bc"",
                    ""path"": ""<XRController>{RightHand}/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Home"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""2955c71a-6df8-4b12-81e0-1c1ac167cf12"",
            ""actions"": [
                {
                    ""name"": ""Spacebar"",
                    ""type"": ""Button"",
                    ""id"": ""8102576c-c648-4d5d-9a7b-dc8ae0c69964"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24229da5-7569-4928-82cc-20865deddfb9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spacebar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic XR Controller"",
            ""bindingGroup"": ""Generic XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<WMRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Continuous Move"",
            ""bindingGroup"": ""Continuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Noncontinuous Move"",
            ""bindingGroup"": ""Noncontinuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // XRI Head
        m_XRIHead = asset.FindActionMap("XRI Head", throwIfNotFound: true);
        m_XRIHead_Position = m_XRIHead.FindAction("Position", throwIfNotFound: true);
        m_XRIHead_Rotation = m_XRIHead.FindAction("Rotation", throwIfNotFound: true);
        // XRI LeftHand
        m_XRILeftHand = asset.FindActionMap("XRI LeftHand", throwIfNotFound: true);
        m_XRILeftHand_Position = m_XRILeftHand.FindAction("Position", throwIfNotFound: true);
        m_XRILeftHand_Rotation = m_XRILeftHand.FindAction("Rotation", throwIfNotFound: true);
        m_XRILeftHand_TrackingState = m_XRILeftHand.FindAction("Tracking State", throwIfNotFound: true);
        m_XRILeftHand_HapticDevice = m_XRILeftHand.FindAction("Haptic Device", throwIfNotFound: true);
        // XRI LeftHand Interaction
        m_XRILeftHandInteraction = asset.FindActionMap("XRI LeftHand Interaction", throwIfNotFound: true);
        m_XRILeftHandInteraction_Select = m_XRILeftHandInteraction.FindAction("Select", throwIfNotFound: true);
        m_XRILeftHandInteraction_SelectValue = m_XRILeftHandInteraction.FindAction("Select Value", throwIfNotFound: true);
        m_XRILeftHandInteraction_Activate = m_XRILeftHandInteraction.FindAction("Activate", throwIfNotFound: true);
        m_XRILeftHandInteraction_ActivateValue = m_XRILeftHandInteraction.FindAction("Activate Value", throwIfNotFound: true);
        m_XRILeftHandInteraction_UIPress = m_XRILeftHandInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_XRILeftHandInteraction_UIPressValue = m_XRILeftHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_XRILeftHandInteraction_RotateAnchor = m_XRILeftHandInteraction.FindAction("Rotate Anchor", throwIfNotFound: true);
        m_XRILeftHandInteraction_TranslateAnchor = m_XRILeftHandInteraction.FindAction("Translate Anchor", throwIfNotFound: true);
        // XRI LeftHand Locomotion
        m_XRILeftHandLocomotion = asset.FindActionMap("XRI LeftHand Locomotion", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportSelect = m_XRILeftHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportModeActivate = m_XRILeftHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportModeCancel = m_XRILeftHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_XRILeftHandLocomotion_Turn = m_XRILeftHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_XRILeftHandLocomotion_Move = m_XRILeftHandLocomotion.FindAction("Move", throwIfNotFound: true);
        // XRI RightHand
        m_XRIRightHand = asset.FindActionMap("XRI RightHand", throwIfNotFound: true);
        m_XRIRightHand_Position = m_XRIRightHand.FindAction("Position", throwIfNotFound: true);
        m_XRIRightHand_Rotation = m_XRIRightHand.FindAction("Rotation", throwIfNotFound: true);
        m_XRIRightHand_TrackingState = m_XRIRightHand.FindAction("Tracking State", throwIfNotFound: true);
        m_XRIRightHand_HapticDevice = m_XRIRightHand.FindAction("Haptic Device", throwIfNotFound: true);
        // XRI RightHand Interaction
        m_XRIRightHandInteraction = asset.FindActionMap("XRI RightHand Interaction", throwIfNotFound: true);
        m_XRIRightHandInteraction_Select = m_XRIRightHandInteraction.FindAction("Select", throwIfNotFound: true);
        m_XRIRightHandInteraction_SelectValue = m_XRIRightHandInteraction.FindAction("Select Value", throwIfNotFound: true);
        m_XRIRightHandInteraction_Activate = m_XRIRightHandInteraction.FindAction("Activate", throwIfNotFound: true);
        m_XRIRightHandInteraction_ActivateValue = m_XRIRightHandInteraction.FindAction("Activate Value", throwIfNotFound: true);
        m_XRIRightHandInteraction_UIPress = m_XRIRightHandInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_XRIRightHandInteraction_UIPressValue = m_XRIRightHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_XRIRightHandInteraction_RotateAnchor = m_XRIRightHandInteraction.FindAction("Rotate Anchor", throwIfNotFound: true);
        m_XRIRightHandInteraction_TranslateAnchor = m_XRIRightHandInteraction.FindAction("Translate Anchor", throwIfNotFound: true);
        // XRI RightHand Locomotion
        m_XRIRightHandLocomotion = asset.FindActionMap("XRI RightHand Locomotion", throwIfNotFound: true);
        m_XRIRightHandLocomotion_TeleportSelect = m_XRIRightHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_XRIRightHandLocomotion_TeleportModeActivate = m_XRIRightHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_XRIRightHandLocomotion_TeleportModeCancel = m_XRIRightHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_XRIRightHandLocomotion_Turn = m_XRIRightHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_XRIRightHandLocomotion_Move = m_XRIRightHandLocomotion.FindAction("Move", throwIfNotFound: true);
        // Left Controller
        m_LeftController = asset.FindActionMap("Left Controller", throwIfNotFound: true);
        m_LeftController_TriggerPressed = m_LeftController.FindAction("Trigger Pressed", throwIfNotFound: true);
        m_LeftController_TriggerValue = m_LeftController.FindAction("Trigger Value", throwIfNotFound: true);
        m_LeftController_GripPressed = m_LeftController.FindAction("Grip Pressed", throwIfNotFound: true);
        m_LeftController_GripValue = m_LeftController.FindAction("Grip Value", throwIfNotFound: true);
        m_LeftController_X = m_LeftController.FindAction("X", throwIfNotFound: true);
        m_LeftController_Y = m_LeftController.FindAction("Y", throwIfNotFound: true);
        m_LeftController_Menu = m_LeftController.FindAction("Menu", throwIfNotFound: true);
        // Right Controller
        m_RightController = asset.FindActionMap("Right Controller", throwIfNotFound: true);
        m_RightController_TriggerPressed = m_RightController.FindAction("Trigger Pressed", throwIfNotFound: true);
        m_RightController_TriggerValue = m_RightController.FindAction("Trigger Value", throwIfNotFound: true);
        m_RightController_GripPressed = m_RightController.FindAction("Grip Pressed", throwIfNotFound: true);
        m_RightController_GripValue = m_RightController.FindAction("Grip Value", throwIfNotFound: true);
        m_RightController_A = m_RightController.FindAction("A", throwIfNotFound: true);
        m_RightController_B = m_RightController.FindAction("B", throwIfNotFound: true);
        m_RightController_Home = m_RightController.FindAction("Home", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Spacebar = m_Keyboard.FindAction("Spacebar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRI Head
    private readonly InputActionMap m_XRIHead;
    private IXRIHeadActions m_XRIHeadActionsCallbackInterface;
    private readonly InputAction m_XRIHead_Position;
    private readonly InputAction m_XRIHead_Rotation;
    public struct XRIHeadActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRIHeadActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_XRIHead_Position;
        public InputAction @Rotation => m_Wrapper.m_XRIHead_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_XRIHead; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIHeadActions set) { return set.Get(); }
        public void SetCallbacks(IXRIHeadActions instance)
        {
            if (m_Wrapper.m_XRIHeadActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_XRIHeadActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_XRIHeadActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_XRIHeadActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_XRIHeadActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_XRIHeadActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_XRIHeadActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_XRIHeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public XRIHeadActions @XRIHead => new XRIHeadActions(this);

    // XRI LeftHand
    private readonly InputActionMap m_XRILeftHand;
    private IXRILeftHandActions m_XRILeftHandActionsCallbackInterface;
    private readonly InputAction m_XRILeftHand_Position;
    private readonly InputAction m_XRILeftHand_Rotation;
    private readonly InputAction m_XRILeftHand_TrackingState;
    private readonly InputAction m_XRILeftHand_HapticDevice;
    public struct XRILeftHandActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRILeftHandActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_XRILeftHand_Position;
        public InputAction @Rotation => m_Wrapper.m_XRILeftHand_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_XRILeftHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_XRILeftHand_HapticDevice;
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRILeftHandActions set) { return set.Get(); }
        public void SetCallbacks(IXRILeftHandActions instance)
        {
            if (m_Wrapper.m_XRILeftHandActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnRotation;
                @TrackingState.started -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnTrackingState;
                @HapticDevice.started -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_XRILeftHandActionsCallbackInterface.OnHapticDevice;
            }
            m_Wrapper.m_XRILeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
            }
        }
    }
    public XRILeftHandActions @XRILeftHand => new XRILeftHandActions(this);

    // XRI LeftHand Interaction
    private readonly InputActionMap m_XRILeftHandInteraction;
    private IXRILeftHandInteractionActions m_XRILeftHandInteractionActionsCallbackInterface;
    private readonly InputAction m_XRILeftHandInteraction_Select;
    private readonly InputAction m_XRILeftHandInteraction_SelectValue;
    private readonly InputAction m_XRILeftHandInteraction_Activate;
    private readonly InputAction m_XRILeftHandInteraction_ActivateValue;
    private readonly InputAction m_XRILeftHandInteraction_UIPress;
    private readonly InputAction m_XRILeftHandInteraction_UIPressValue;
    private readonly InputAction m_XRILeftHandInteraction_RotateAnchor;
    private readonly InputAction m_XRILeftHandInteraction_TranslateAnchor;
    public struct XRILeftHandInteractionActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRILeftHandInteractionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_XRILeftHandInteraction_Select;
        public InputAction @SelectValue => m_Wrapper.m_XRILeftHandInteraction_SelectValue;
        public InputAction @Activate => m_Wrapper.m_XRILeftHandInteraction_Activate;
        public InputAction @ActivateValue => m_Wrapper.m_XRILeftHandInteraction_ActivateValue;
        public InputAction @UIPress => m_Wrapper.m_XRILeftHandInteraction_UIPress;
        public InputAction @UIPressValue => m_Wrapper.m_XRILeftHandInteraction_UIPressValue;
        public InputAction @RotateAnchor => m_Wrapper.m_XRILeftHandInteraction_RotateAnchor;
        public InputAction @TranslateAnchor => m_Wrapper.m_XRILeftHandInteraction_TranslateAnchor;
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHandInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRILeftHandInteractionActions set) { return set.Get(); }
        public void SetCallbacks(IXRILeftHandInteractionActions instance)
        {
            if (m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnSelect;
                @SelectValue.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnSelectValue;
                @SelectValue.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnSelectValue;
                @SelectValue.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnSelectValue;
                @Activate.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnActivate;
                @Activate.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnActivate;
                @Activate.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnActivate;
                @ActivateValue.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnActivateValue;
                @ActivateValue.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnActivateValue;
                @ActivateValue.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnActivateValue;
                @UIPress.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnUIPress;
                @UIPress.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnUIPress;
                @UIPress.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnUIPress;
                @UIPressValue.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnUIPressValue;
                @UIPressValue.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnUIPressValue;
                @UIPressValue.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnUIPressValue;
                @RotateAnchor.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnRotateAnchor;
                @RotateAnchor.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnRotateAnchor;
                @RotateAnchor.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnRotateAnchor;
                @TranslateAnchor.started -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnTranslateAnchor;
                @TranslateAnchor.performed -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnTranslateAnchor;
                @TranslateAnchor.canceled -= m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface.OnTranslateAnchor;
            }
            m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @SelectValue.started += instance.OnSelectValue;
                @SelectValue.performed += instance.OnSelectValue;
                @SelectValue.canceled += instance.OnSelectValue;
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @ActivateValue.started += instance.OnActivateValue;
                @ActivateValue.performed += instance.OnActivateValue;
                @ActivateValue.canceled += instance.OnActivateValue;
                @UIPress.started += instance.OnUIPress;
                @UIPress.performed += instance.OnUIPress;
                @UIPress.canceled += instance.OnUIPress;
                @UIPressValue.started += instance.OnUIPressValue;
                @UIPressValue.performed += instance.OnUIPressValue;
                @UIPressValue.canceled += instance.OnUIPressValue;
                @RotateAnchor.started += instance.OnRotateAnchor;
                @RotateAnchor.performed += instance.OnRotateAnchor;
                @RotateAnchor.canceled += instance.OnRotateAnchor;
                @TranslateAnchor.started += instance.OnTranslateAnchor;
                @TranslateAnchor.performed += instance.OnTranslateAnchor;
                @TranslateAnchor.canceled += instance.OnTranslateAnchor;
            }
        }
    }
    public XRILeftHandInteractionActions @XRILeftHandInteraction => new XRILeftHandInteractionActions(this);

    // XRI LeftHand Locomotion
    private readonly InputActionMap m_XRILeftHandLocomotion;
    private IXRILeftHandLocomotionActions m_XRILeftHandLocomotionActionsCallbackInterface;
    private readonly InputAction m_XRILeftHandLocomotion_TeleportSelect;
    private readonly InputAction m_XRILeftHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_XRILeftHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_XRILeftHandLocomotion_Turn;
    private readonly InputAction m_XRILeftHandLocomotion_Move;
    public struct XRILeftHandLocomotionActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRILeftHandLocomotionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TeleportSelect => m_Wrapper.m_XRILeftHandLocomotion_TeleportSelect;
        public InputAction @TeleportModeActivate => m_Wrapper.m_XRILeftHandLocomotion_TeleportModeActivate;
        public InputAction @TeleportModeCancel => m_Wrapper.m_XRILeftHandLocomotion_TeleportModeCancel;
        public InputAction @Turn => m_Wrapper.m_XRILeftHandLocomotion_Turn;
        public InputAction @Move => m_Wrapper.m_XRILeftHandLocomotion_Move;
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRILeftHandLocomotionActions set) { return set.Get(); }
        public void SetCallbacks(IXRILeftHandLocomotionActions instance)
        {
            if (m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface != null)
            {
                @TeleportSelect.started -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.performed -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.canceled -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportSelect;
                @TeleportModeActivate.started -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.performed -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.canceled -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeCancel.started -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.performed -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.canceled -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTeleportModeCancel;
                @Turn.started -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnTurn;
                @Move.started -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TeleportSelect.started += instance.OnTeleportSelect;
                @TeleportSelect.performed += instance.OnTeleportSelect;
                @TeleportSelect.canceled += instance.OnTeleportSelect;
                @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public XRILeftHandLocomotionActions @XRILeftHandLocomotion => new XRILeftHandLocomotionActions(this);

    // XRI RightHand
    private readonly InputActionMap m_XRIRightHand;
    private IXRIRightHandActions m_XRIRightHandActionsCallbackInterface;
    private readonly InputAction m_XRIRightHand_Position;
    private readonly InputAction m_XRIRightHand_Rotation;
    private readonly InputAction m_XRIRightHand_TrackingState;
    private readonly InputAction m_XRIRightHand_HapticDevice;
    public struct XRIRightHandActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRIRightHandActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_XRIRightHand_Position;
        public InputAction @Rotation => m_Wrapper.m_XRIRightHand_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_XRIRightHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_XRIRightHand_HapticDevice;
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIRightHandActions set) { return set.Get(); }
        public void SetCallbacks(IXRIRightHandActions instance)
        {
            if (m_Wrapper.m_XRIRightHandActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnRotation;
                @TrackingState.started -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnTrackingState;
                @HapticDevice.started -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_XRIRightHandActionsCallbackInterface.OnHapticDevice;
            }
            m_Wrapper.m_XRIRightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
            }
        }
    }
    public XRIRightHandActions @XRIRightHand => new XRIRightHandActions(this);

    // XRI RightHand Interaction
    private readonly InputActionMap m_XRIRightHandInteraction;
    private IXRIRightHandInteractionActions m_XRIRightHandInteractionActionsCallbackInterface;
    private readonly InputAction m_XRIRightHandInteraction_Select;
    private readonly InputAction m_XRIRightHandInteraction_SelectValue;
    private readonly InputAction m_XRIRightHandInteraction_Activate;
    private readonly InputAction m_XRIRightHandInteraction_ActivateValue;
    private readonly InputAction m_XRIRightHandInteraction_UIPress;
    private readonly InputAction m_XRIRightHandInteraction_UIPressValue;
    private readonly InputAction m_XRIRightHandInteraction_RotateAnchor;
    private readonly InputAction m_XRIRightHandInteraction_TranslateAnchor;
    public struct XRIRightHandInteractionActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRIRightHandInteractionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_XRIRightHandInteraction_Select;
        public InputAction @SelectValue => m_Wrapper.m_XRIRightHandInteraction_SelectValue;
        public InputAction @Activate => m_Wrapper.m_XRIRightHandInteraction_Activate;
        public InputAction @ActivateValue => m_Wrapper.m_XRIRightHandInteraction_ActivateValue;
        public InputAction @UIPress => m_Wrapper.m_XRIRightHandInteraction_UIPress;
        public InputAction @UIPressValue => m_Wrapper.m_XRIRightHandInteraction_UIPressValue;
        public InputAction @RotateAnchor => m_Wrapper.m_XRIRightHandInteraction_RotateAnchor;
        public InputAction @TranslateAnchor => m_Wrapper.m_XRIRightHandInteraction_TranslateAnchor;
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHandInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIRightHandInteractionActions set) { return set.Get(); }
        public void SetCallbacks(IXRIRightHandInteractionActions instance)
        {
            if (m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnSelect;
                @SelectValue.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnSelectValue;
                @SelectValue.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnSelectValue;
                @SelectValue.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnSelectValue;
                @Activate.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnActivate;
                @Activate.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnActivate;
                @Activate.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnActivate;
                @ActivateValue.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnActivateValue;
                @ActivateValue.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnActivateValue;
                @ActivateValue.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnActivateValue;
                @UIPress.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnUIPress;
                @UIPress.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnUIPress;
                @UIPress.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnUIPress;
                @UIPressValue.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnUIPressValue;
                @UIPressValue.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnUIPressValue;
                @UIPressValue.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnUIPressValue;
                @RotateAnchor.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnRotateAnchor;
                @RotateAnchor.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnRotateAnchor;
                @RotateAnchor.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnRotateAnchor;
                @TranslateAnchor.started -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnTranslateAnchor;
                @TranslateAnchor.performed -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnTranslateAnchor;
                @TranslateAnchor.canceled -= m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface.OnTranslateAnchor;
            }
            m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @SelectValue.started += instance.OnSelectValue;
                @SelectValue.performed += instance.OnSelectValue;
                @SelectValue.canceled += instance.OnSelectValue;
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @ActivateValue.started += instance.OnActivateValue;
                @ActivateValue.performed += instance.OnActivateValue;
                @ActivateValue.canceled += instance.OnActivateValue;
                @UIPress.started += instance.OnUIPress;
                @UIPress.performed += instance.OnUIPress;
                @UIPress.canceled += instance.OnUIPress;
                @UIPressValue.started += instance.OnUIPressValue;
                @UIPressValue.performed += instance.OnUIPressValue;
                @UIPressValue.canceled += instance.OnUIPressValue;
                @RotateAnchor.started += instance.OnRotateAnchor;
                @RotateAnchor.performed += instance.OnRotateAnchor;
                @RotateAnchor.canceled += instance.OnRotateAnchor;
                @TranslateAnchor.started += instance.OnTranslateAnchor;
                @TranslateAnchor.performed += instance.OnTranslateAnchor;
                @TranslateAnchor.canceled += instance.OnTranslateAnchor;
            }
        }
    }
    public XRIRightHandInteractionActions @XRIRightHandInteraction => new XRIRightHandInteractionActions(this);

    // XRI RightHand Locomotion
    private readonly InputActionMap m_XRIRightHandLocomotion;
    private IXRIRightHandLocomotionActions m_XRIRightHandLocomotionActionsCallbackInterface;
    private readonly InputAction m_XRIRightHandLocomotion_TeleportSelect;
    private readonly InputAction m_XRIRightHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_XRIRightHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_XRIRightHandLocomotion_Turn;
    private readonly InputAction m_XRIRightHandLocomotion_Move;
    public struct XRIRightHandLocomotionActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public XRIRightHandLocomotionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TeleportSelect => m_Wrapper.m_XRIRightHandLocomotion_TeleportSelect;
        public InputAction @TeleportModeActivate => m_Wrapper.m_XRIRightHandLocomotion_TeleportModeActivate;
        public InputAction @TeleportModeCancel => m_Wrapper.m_XRIRightHandLocomotion_TeleportModeCancel;
        public InputAction @Turn => m_Wrapper.m_XRIRightHandLocomotion_Turn;
        public InputAction @Move => m_Wrapper.m_XRIRightHandLocomotion_Move;
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIRightHandLocomotionActions set) { return set.Get(); }
        public void SetCallbacks(IXRIRightHandLocomotionActions instance)
        {
            if (m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface != null)
            {
                @TeleportSelect.started -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.performed -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.canceled -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportSelect;
                @TeleportModeActivate.started -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.performed -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.canceled -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeCancel.started -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.performed -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.canceled -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTeleportModeCancel;
                @Turn.started -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnTurn;
                @Move.started -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TeleportSelect.started += instance.OnTeleportSelect;
                @TeleportSelect.performed += instance.OnTeleportSelect;
                @TeleportSelect.canceled += instance.OnTeleportSelect;
                @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public XRIRightHandLocomotionActions @XRIRightHandLocomotion => new XRIRightHandLocomotionActions(this);

    // Left Controller
    private readonly InputActionMap m_LeftController;
    private ILeftControllerActions m_LeftControllerActionsCallbackInterface;
    private readonly InputAction m_LeftController_TriggerPressed;
    private readonly InputAction m_LeftController_TriggerValue;
    private readonly InputAction m_LeftController_GripPressed;
    private readonly InputAction m_LeftController_GripValue;
    private readonly InputAction m_LeftController_X;
    private readonly InputAction m_LeftController_Y;
    private readonly InputAction m_LeftController_Menu;
    public struct LeftControllerActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public LeftControllerActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerPressed => m_Wrapper.m_LeftController_TriggerPressed;
        public InputAction @TriggerValue => m_Wrapper.m_LeftController_TriggerValue;
        public InputAction @GripPressed => m_Wrapper.m_LeftController_GripPressed;
        public InputAction @GripValue => m_Wrapper.m_LeftController_GripValue;
        public InputAction @X => m_Wrapper.m_LeftController_X;
        public InputAction @Y => m_Wrapper.m_LeftController_Y;
        public InputAction @Menu => m_Wrapper.m_LeftController_Menu;
        public InputActionMap Get() { return m_Wrapper.m_LeftController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftControllerActions set) { return set.Get(); }
        public void SetCallbacks(ILeftControllerActions instance)
        {
            if (m_Wrapper.m_LeftControllerActionsCallbackInterface != null)
            {
                @TriggerPressed.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTriggerPressed;
                @TriggerValue.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTriggerValue;
                @GripPressed.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnGripPressed;
                @GripPressed.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnGripPressed;
                @GripPressed.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnGripPressed;
                @GripValue.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnGripValue;
                @GripValue.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnGripValue;
                @GripValue.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnGripValue;
                @X.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnX;
                @Y.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnY;
                @Y.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnY;
                @Y.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnY;
                @Menu.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_LeftControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TriggerPressed.started += instance.OnTriggerPressed;
                @TriggerPressed.performed += instance.OnTriggerPressed;
                @TriggerPressed.canceled += instance.OnTriggerPressed;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @GripPressed.started += instance.OnGripPressed;
                @GripPressed.performed += instance.OnGripPressed;
                @GripPressed.canceled += instance.OnGripPressed;
                @GripValue.started += instance.OnGripValue;
                @GripValue.performed += instance.OnGripValue;
                @GripValue.canceled += instance.OnGripValue;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @Y.started += instance.OnY;
                @Y.performed += instance.OnY;
                @Y.canceled += instance.OnY;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public LeftControllerActions @LeftController => new LeftControllerActions(this);

    // Right Controller
    private readonly InputActionMap m_RightController;
    private IRightControllerActions m_RightControllerActionsCallbackInterface;
    private readonly InputAction m_RightController_TriggerPressed;
    private readonly InputAction m_RightController_TriggerValue;
    private readonly InputAction m_RightController_GripPressed;
    private readonly InputAction m_RightController_GripValue;
    private readonly InputAction m_RightController_A;
    private readonly InputAction m_RightController_B;
    private readonly InputAction m_RightController_Home;
    public struct RightControllerActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public RightControllerActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerPressed => m_Wrapper.m_RightController_TriggerPressed;
        public InputAction @TriggerValue => m_Wrapper.m_RightController_TriggerValue;
        public InputAction @GripPressed => m_Wrapper.m_RightController_GripPressed;
        public InputAction @GripValue => m_Wrapper.m_RightController_GripValue;
        public InputAction @A => m_Wrapper.m_RightController_A;
        public InputAction @B => m_Wrapper.m_RightController_B;
        public InputAction @Home => m_Wrapper.m_RightController_Home;
        public InputActionMap Get() { return m_Wrapper.m_RightController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightControllerActions set) { return set.Get(); }
        public void SetCallbacks(IRightControllerActions instance)
        {
            if (m_Wrapper.m_RightControllerActionsCallbackInterface != null)
            {
                @TriggerPressed.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTriggerPressed;
                @TriggerValue.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTriggerValue;
                @GripPressed.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnGripPressed;
                @GripPressed.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnGripPressed;
                @GripPressed.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnGripPressed;
                @GripValue.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnGripValue;
                @GripValue.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnGripValue;
                @GripValue.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnGripValue;
                @A.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnA;
                @B.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnB;
                @Home.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnHome;
                @Home.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnHome;
                @Home.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnHome;
            }
            m_Wrapper.m_RightControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TriggerPressed.started += instance.OnTriggerPressed;
                @TriggerPressed.performed += instance.OnTriggerPressed;
                @TriggerPressed.canceled += instance.OnTriggerPressed;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @GripPressed.started += instance.OnGripPressed;
                @GripPressed.performed += instance.OnGripPressed;
                @GripPressed.canceled += instance.OnGripPressed;
                @GripValue.started += instance.OnGripValue;
                @GripValue.performed += instance.OnGripValue;
                @GripValue.canceled += instance.OnGripValue;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
                @Home.started += instance.OnHome;
                @Home.performed += instance.OnHome;
                @Home.canceled += instance.OnHome;
            }
        }
    }
    public RightControllerActions @RightController => new RightControllerActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_Spacebar;
    public struct KeyboardActions
    {
        private @XRIDefaultInputActions m_Wrapper;
        public KeyboardActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spacebar => m_Wrapper.m_Keyboard_Spacebar;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @Spacebar.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpacebar;
                @Spacebar.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpacebar;
                @Spacebar.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpacebar;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Spacebar.started += instance.OnSpacebar;
                @Spacebar.performed += instance.OnSpacebar;
                @Spacebar.canceled += instance.OnSpacebar;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_GenericXRControllerSchemeIndex = -1;
    public InputControlScheme GenericXRControllerScheme
    {
        get
        {
            if (m_GenericXRControllerSchemeIndex == -1) m_GenericXRControllerSchemeIndex = asset.FindControlSchemeIndex("Generic XR Controller");
            return asset.controlSchemes[m_GenericXRControllerSchemeIndex];
        }
    }
    private int m_ContinuousMoveSchemeIndex = -1;
    public InputControlScheme ContinuousMoveScheme
    {
        get
        {
            if (m_ContinuousMoveSchemeIndex == -1) m_ContinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Continuous Move");
            return asset.controlSchemes[m_ContinuousMoveSchemeIndex];
        }
    }
    private int m_NoncontinuousMoveSchemeIndex = -1;
    public InputControlScheme NoncontinuousMoveScheme
    {
        get
        {
            if (m_NoncontinuousMoveSchemeIndex == -1) m_NoncontinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Noncontinuous Move");
            return asset.controlSchemes[m_NoncontinuousMoveSchemeIndex];
        }
    }
    public interface IXRIHeadActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IXRILeftHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
    }
    public interface IXRILeftHandInteractionActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnSelectValue(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
        void OnActivateValue(InputAction.CallbackContext context);
        void OnUIPress(InputAction.CallbackContext context);
        void OnUIPressValue(InputAction.CallbackContext context);
        void OnRotateAnchor(InputAction.CallbackContext context);
        void OnTranslateAnchor(InputAction.CallbackContext context);
    }
    public interface IXRILeftHandLocomotionActions
    {
        void OnTeleportSelect(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IXRIRightHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
    }
    public interface IXRIRightHandInteractionActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnSelectValue(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
        void OnActivateValue(InputAction.CallbackContext context);
        void OnUIPress(InputAction.CallbackContext context);
        void OnUIPressValue(InputAction.CallbackContext context);
        void OnRotateAnchor(InputAction.CallbackContext context);
        void OnTranslateAnchor(InputAction.CallbackContext context);
    }
    public interface IXRIRightHandLocomotionActions
    {
        void OnTeleportSelect(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ILeftControllerActions
    {
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnGripValue(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IRightControllerActions
    {
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnGripValue(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnHome(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnSpacebar(InputAction.CallbackContext context);
    }
}
